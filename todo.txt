TODO -> Learn -> Install -> Try

TODO:
- refactor keymappings to more efficient maps
- setup a better way for dealing with copy, paste, cut
- setup a lint file with rules i like
- decide how I best like symbol out lines
- only attach commands based on buffer. e.g all go commands can move into <leader>l once I attach them to go files
- go through each plugin and stabalize (optimize/ clean). Is it needed? 

Learn: 
- treesitter text objects
- testing + debuggin
- fugitive git merge
- surround

Install:
- go test coverage https://github.com/rafaelsq/nvim-goc.lua (do this after attaching commands to the buffer)
- dashboard

Try out:
- ray-x navigator
- window control. works with telescope and more https://github.com/anuvyklack/hydra.nvim
- https://github.com/LukasPietzschmann/telescope-tabs
- https://github.com/kelly-lin/ranger.nvim
- better word jumping, aimed at code rather than text https://github.com/chrisgrieser/nvim-spider 
- like telescope symbol viewer but aims at navigating the current file  https://github.com/SmiteshP/nvim-navbuddy | can telescope do this?
- https://github.com/RRethy/vim-illuminate
- telescope compatible clipboard https://github.com/AckslD/nvim-neoclip.lua
- https://github.com/crusj/structrue-go.nvim  // symbols for go with pane and peek windows
- https://github.com/weilbith/nvim-code-action-menu // code action menu. If this menu displays all code actions in the file might be worth
- https://github.com/jinzhongjia/LspUI.nvim/wiki/Screen-Shot // ui for all the lsp actions. This could be good early and once used to things delete





